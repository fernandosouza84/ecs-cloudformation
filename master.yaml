Description: >

    This template deploys a highly available ECS cluster using an AutoScaling Group, with 
    ECS hosts distributed across multiple Availability Zones. 

    Last Modified: 15th July 2017
    Authors: Marcos Sobrinho <marcos.sobrinho@truckpad.com.br>, Paul Maddox <pmaddox@amazon.com>


Parameters:

    MinClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    MaxClusterSize:
        Description: How many ECS hosts do you want this cluster to have at most?
        Type: Number
        Default: 2

    InstanceType:
        Description: Instance type to use
        Type: String
        AllowedValues: [t2.large, c4.large, c4.xlarge, c4.2xlarge, m4.large, m4.xlarge, m4.2xlarge]

    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS cluster
        Type: AWS::EC2::KeyPair::KeyName

    SubnetPrefix:
        Description: IP address first two blocks, used to build the VPC Subnet IPs. Should be within the Private IPv4 address space
        Type: String
        Default: '10.16'
        AllowedPattern: ^(10|172|192)\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$

    DatadogApiKey:
        Description: Install Datadog dd-agent using this API Key. Set to 'none' to disable.
        Type: String            
        Default: none
        AllowedPattern: ^none|[a-f0-9]{32}$

    DatadogEnableAPM:
        Description: Enable Application Performance Monitoring (trace). Only used if you have an valid Datadog API Key.
        Type: String
        Default: false
        AllowedValues: [false, true]


Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label: 
                default: Cluster Attributes
              Parameters:
                - MinClusterSize
                - MaxClusterSize
                - InstanceType
            - Label: 
                default: Network Connectivity
              Parameters:
                - SubnetPrefix
                - KeyName
            - Label: 
                default: Application Monitoring
              Parameters:
                - DatadogApiKey
                - DatadogEnableAPM
        ParameterLabels:
            MinClusterSize: 
                default: Minimal Cluster Size
            MaxClusterSize: 
                default: Maximum Cluster Size
            InstanceType: 
                default: EC2 Instance Type
            SubnetPrefix: 
                default: Subnet Prefix
            KeyName: 
                default: SSH Key Name
            DatadogApiKey: 
                default: Datadog API Key
            DatadogEnableAPM: 
                default: 'Datadog: Enable APM?'


Conditions:
    EnableDatadogAgent: !Not [ !Equals [ !Ref DatadogApiKey, none ] ]


Resources:

    vpc:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/vpc.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VpcCIDR: !Join ['.', [!Ref SubnetPrefix, '0.0/16']]
                PublicSubnet1CIDR: !Join ['.', [!Ref SubnetPrefix, '8.0/21']]
                PublicSubnet2CIDR: !Join ['.', [!Ref SubnetPrefix, '16.0/21']]
                PrivateSubnet1CIDR: !Join ['.', [!Ref SubnetPrefix, '24.0/21']]
                PrivateSubnet2CIDR: !Join ['.', [!Ref SubnetPrefix, '32.0/21']]

    sgs:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/security-groups.yaml
            Parameters: 
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt vpc.Outputs.VPC

    alb:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/load-balancers.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt vpc.Outputs.VPC
                Subnets: !GetAtt vpc.Outputs.PublicSubnets
                SecurityGroup: !GetAtt sgs.Outputs.LoadBalancerSecurityGroup

    ecs:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/infrastructure/ecs-cluster.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                KeyName: !Ref KeyName
                InstanceType: !Ref InstanceType
                MinClusterSize: !Ref MinClusterSize
                MaxClusterSize: !Ref MaxClusterSize
                VPC: !GetAtt vpc.Outputs.VPC
                SecurityGroup: !GetAtt sgs.Outputs.ECSHostSecurityGroup
                Subnets: !GetAtt vpc.Outputs.PrivateSubnets

    ddagent:
        Type: AWS::CloudFormation::Stack
        Condition: EnableDatadogAgent
        DependsOn: ecs
        Properties:
            TemplateURL: https://s3.amazonaws.com/cfn-truckpad/ecs/services/dd-agent/service.yaml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                ApiKey: !Ref DatadogApiKey
                EnableAPM: !Ref DatadogEnableAPM


Outputs:

    Cluster:
        Description: The ECS cluster name that I've created!
        Value: !GetAtt ecs.Outputs.Cluster
        Export:
            Name: !Sub ${AWS::StackName}-cluster

    LoadBalancer:
        Description: A reference to the Application Load Balancer
        Value: !GetAtt alb.Outputs.LoadBalancer
        Export:
            Name: !Sub ${AWS::StackName}-alb

    LoadBalancerUrl:
        Description: The URL of the ALB
        Value: !GetAtt alb.Outputs.LoadBalancerUrl
        Export:
            Name: !Sub ${AWS::StackName}-alb-url

    Listener:
        Description: A reference to a port 80 listener
        Value: !GetAtt alb.Outputs.Listener
        Export:
            Name: !Sub ${AWS::StackName}-alb-listener
